# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3-stretch
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "dev-requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r dev-requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "dev-requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      #- run:
      #    name: run tests
      #    command: |
      #      . venv/bin/activate
      #      python manage.py test

  test:
    docker:
      - image: circleci/python:3-stretch
    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          key: v1-dependencies-{{ checksum "dev-requirements.txt" }}
      - run:
          name: verify git tag vs version
          command: |
            python3 -m venv venv
            . venv/bin/activate
            mkdir test-reports
            pytest
            safety check >> test-reports/safety.out

      - store_artifacts:
          path: test-reports
          destination: test-reports


  deploy:
    docker:
      - image: circleci/python:3-stretch
    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          key: v1-dependencies-{{ checksum "dev-requirements.txt" }}

      - run:
          name: verify git tag vs version
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python setup.py verify

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = rveach" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run: 
          name: make a source distribution
          command: |
            . venv/bin/activate
            python setup.py sdist

      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload --config-file ~/.pypirc dist/*

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
      - deploy:
          context: PYPI
          requires:
            - build
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
